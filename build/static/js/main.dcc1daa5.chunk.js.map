{"version":3,"sources":["Components/SideDescription.js","Components/SingleCityItem.js","Components/CitiesList.js","App.js","serviceWorker.js","index.js"],"names":["className","SingleCityItem","city","name","weather","main","temp","description","useState","cities","updateCities","useEffect","fetch","then","prepareCities","citiesData","a","json","list","sortedCitiesWithRainWeather","filter","sort","length","map","index","key","App","SideDescription","CitiesList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iLAEe,G,MAAA,WACX,OACI,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,SAAd,eACA,gH,8BCwBGC,MA3Bf,YAAsC,IAAD,IAAZC,YAAY,MAAL,GAAK,EACjC,OACI,yBAAKF,UAAU,eACX,wBAAIA,UAAU,QAAd,SAA4BE,EAAKC,MACjC,6BACI,uCAAaD,EAAKE,QAAQ,GAAGC,MAC7B,oCAAUH,EAAKG,KAAKC,KAApB,MAEJ,6CACkBJ,EAAKE,QAAQ,GAAGG,eCT/B,aAAa,IAAD,EACQC,mBAAS,IADjB,mBAChBC,EADgB,KACRC,EADQ,KAEvBC,qBAAU,WAGNC,MAAM,GAAD,OADY,wCACZ,OAFW,oHAEeC,KAAKC,KACrC,IACH,IAAMA,EAAa,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,sEACGD,EAAWE,OADd,gBACXC,EADW,EACXA,KACDC,EAA8BD,EAC/BE,QAAO,SAAAlB,GAAI,MAA6B,SAAzBA,EAAKE,QAAQ,GAAGC,QAC/BgB,MAAK,uBAAElB,KAAF,EAAgBA,KAAiC,GAAK,KAChEO,EAAaS,GALK,2CAAH,sDAOnB,OACI,yBAAKnB,UAAU,2BACX,wBAAIA,UAAU,qBAAd,eACA,6BACA,4BAESS,EAAOa,OAKRb,EAAOc,KAAI,SAACrB,EAAMsB,GAAP,OACP,wBAAIC,IAAKD,GACL,kBAAC,EAAD,CAAgBtB,KAAMA,QAN1B,yBAAKF,UAAU,SACX,6CCTb0B,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,yBAAKA,UAAU,aACX,kBAAC2B,EAAD,MACA,kBAACC,EAAD,SCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dcc1daa5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function () {\r\n    return (\r\n        <div className=\"aside even-shadow\">\r\n            <h1 className=\"title\">Weather App</h1>\r\n            <p>This app displays an updated list of cities with a weather prediction of rain.</p>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction SingleCityItem({city = {}}) {\r\n    return (\r\n        <div className=\"single-city\">\r\n            <h2 className=\"name\">City: {city.name}</h2>\r\n            <div>\r\n                <p>Weather: {city.weather[0].main}</p>\r\n                <p>temp: {city.main.temp} </p>\r\n            </div>\r\n            <div>\r\n                Description: {city.weather[0].description}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nSingleCityItem.propTypes = {\r\n    city: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        weather: PropTypes.array.isRequired,\r\n        main: PropTypes.shape({\r\n            temp: PropTypes.number.isRequired\r\n        }).isRequired,\r\n    })\r\n};\r\n\r\nexport default SingleCityItem;","import React, {useState, useEffect} from \"react\";\r\nimport SingleCityItem from \"./SingleCityItem\";\r\n\r\nexport default function () {\r\n    const [cities, updateCities] = useState([]);\r\n    useEffect(() => {\r\n        const baseUrl = \"https://samples.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&appid=439d4b804bc8187953eb36d2a8c26a02\";\r\n        const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n        fetch(`${proxyUrl}${baseUrl}`).then(prepareCities);\r\n    }, []);\r\n    const prepareCities = async(citiesData) => {\r\n        const {list} = await citiesData.json();\r\n        const sortedCitiesWithRainWeather = list\r\n            .filter(city => city.weather[0].main === \"Rain\")\r\n            .sort(({name:name1}, {name: name2}) => name1 > name2 ? 1 : -1);\r\n        updateCities(sortedCitiesWithRainWeather);\r\n    };\r\n    return (\r\n        <div className=\"cities-list even-shadow\">\r\n            <h1 className=\"center-text title\">Cities List</h1>\r\n            <hr/>\r\n            <ul>\r\n                {\r\n                    !cities.length ? (\r\n                        <div className=\"title\">\r\n                            <p>loading...</p>\r\n                        </div>\r\n                    ) :\r\n                    cities.map((city, index) => (\r\n                        <li key={index}>\r\n                            <SingleCityItem city={city}/>\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport SideDescription from './Components/SideDescription'\r\nimport CitiesList from \"./Components/CitiesList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n          <SideDescription />\r\n          <CitiesList/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}